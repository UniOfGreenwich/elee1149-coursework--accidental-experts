name: 'Merge to Main GitHub Action'

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, ready_for_review, labeled, unlabeled]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: 'Check PR requirements'
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            const baseBranch = pr.base.ref;
            const headBranch = pr.head.ref;
            const labels = pr.labels.map(label => label.name);
            const requiredLabels = ['defect', 'enhancement', 'new feature'];
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Proceed only if PR is targeting 'main' branch
            if (baseBranch !== 'main') {
              console.log(`PR is not targeting the 'main' branch. Skipping checks.`);
              return;
            }

            // New requirement: Only 'develop' branch can be merged into 'main'
            if (headBranch !== 'develop') {
              core.setFailed(`Only the 'develop' branch can be merged into 'main'. Current branch is '${headBranch}'.`);
            }

            // Get reviews for the PR
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner,
              repo,
              pull_number: prNumber,
            });

            // Map to track the latest review state per reviewer
            const reviewStates = {};

            for (const review of reviews) {
              const username = review.user.login;
              const submittedAt = new Date(review.submitted_at);

              // If we don't have a review from this user yet, or this review is newer, update it
              if (
                !reviewStates[username] ||
                submittedAt > new Date(reviewStates[username].submittedAt)
              ) {
                reviewStates[username] = {
                  state: review.state,
                  submittedAt: review.submitted_at,
                };
              }
            }

            // Count the number of reviewers whose latest review is 'APPROVED'
            const approvalsCount = Object.values(reviewStates).filter(
              (review) => review.state === 'APPROVED'
            ).length;

            // Check for required labels
            const hasRequiredLabel = labels.some((label) =>
              requiredLabels.includes(label)
            );

            // Fail the check if requirements are not met
            if (approvalsCount < 2) {
              core.setFailed(`PR must have at least 2 approvals. Current approvals: ${approvalsCount}`);
            }

            if (!hasRequiredLabel) {
              core.setFailed(
                `PR must be labeled with at least one of the following: ${requiredLabels.join(', ')}.`
              );
            }

            if (approvalsCount >= 2 && hasRequiredLabel) {
              console.log('PR meets all the requirements.');
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}
